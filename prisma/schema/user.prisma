model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  phone         String?

  preferredContact ContactMethod @default(EMAIL)
  isActive         Boolean       @default(true)
  isStaff          Boolean       @default(false)
  isSuperuser      Boolean       @default(false)
  blocked          Boolean?      @default(false)
  createdAt        DateTime?     @default(now())
  updatedAt        DateTime?     @updatedAt

  // relationships
  accounts        Account[]
  sessions        Session[]
  customerProfile CustomerProfile?
  staffProfile    StaffProfile?

  @@index([email])
  @@map("users")
}

model CustomerProfile {
  id          String        @id @default(cuid())
  userId      String        @unique
  role        CustomerRole? @default(INDIVIDUAL)
  companyName String?
  address     String?
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customer_profiles")
}

model StaffProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  role            StaffRole
  specializations Json      @default("[]") // should be in array form
  availability    Json      @default("{}") // weekly availability in dictionary form

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("staff_profiles")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @id
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
